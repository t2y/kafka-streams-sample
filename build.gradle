plugins {
    id 'application'
    id 'java'

    id 'com.commercehub.gradle.plugin.avro' version '0.20.0'
    id 'com.github.sherter.google-java-format' version '0.8'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    // for type inference
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'

    // for logging
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.26'

    // kafka and kafka streams
    implementation 'org.apache.kafka:kafka-streams:2.5.0'
    implementation 'org.apache.kafka:kafka-clients:2.5.0'
    testImplementation 'org.apache.kafka:kafka-streams-test-utils:2.5.0'

    // kafka streams examples
    implementation 'org.apache.kafka:kafka-streams-examples:2.5.0'

    // avro
    implementation 'org.apache.avro:avro:1.9.2'
    implementation 'io.confluent:kafka-streams-avro-serde:5.5.0'
    implementation 'io.confluent:kafka-avro-serializer:5.5.0'

    // others
    implementation 'com.google.guava:guava:28.0-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}

application {
    mainClassName = 'kafka.streams.sample.stream.user.UserStreamsMain'
}

compileJava.dependsOn tasks.googleJavaFormat

test {
    useJUnitPlatform()
}

avro {
  dateTimeLogicalType = 'JSR310'
  createOptionalGetters = true
}

task runEventStreamsDSL(type: JavaExec) {
    group = 'Execution'
    description = 'Run event streams main class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'kafka.streams.sample.stream.event.dsl.EventStreamsMain'
}

task runEventProducer(type: JavaExec) {
    group = 'Execution'
    description = 'Run event producer main class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'kafka.streams.sample.producer.EventProducer'
}

task runUserStream(type: JavaExec) {
    group = 'Execution'
    description = 'Run streams app main class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'kafka.streams.sample.stream.user.UserStreamsMain'
}

task runProducer(type: JavaExec) {
    group = 'Execution'
    description = 'Run producer main class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'kafka.streams.sample.cli.ProducerMain'
}

task runConsumer(type: JavaExec) {
    group = 'Execution'
    description = 'Run consumer main class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'kafka.streams.sample.cli.ConsumerMain'
}
